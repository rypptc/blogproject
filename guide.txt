virtual environment

upgrade pip

install django

startproject

startapp

from django.http import HttpResponse

def home(request):
    return HttpResponse('<h1>Blog Home</h1>')

from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='bolg-home'),
]

path('blog/', include('blog.urls')),

change image directory




created model posts

python manage.py sqlmigrate blog 0001

in the shell
from django.contrib.auth.models import User

post_2 = Post(title='Blog 2', content='Second Post Content!', author_id=user.id) //note author_id

user.post_set


user.post_set.create(title='Blog 3', content='Third Post Content')   //not need to save here




create app templates

add app to settings.py installed apps

(he added blog.apps.BlogConfig)

added templates, base.html, others, inheritance, bootstrap, css

migrations

User registration

create a separate app

from django.contrib.auth.forms import UserCreationForm

from django.contrib import messages

messages.success, hay varios

<div class="alert alert-{{ message.tags }}"> //este tag pasa el mismo tipo de estilo al mensaje, exito, error, etc.

to create email field, we overridden the user form, as follows

from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']

then used this one in views

install django-crispy-forms

'crispy-forms',


Podemos a√±adir crispy forms a polyglot

path('login/', auth_views.LoginView.as_view(template_name='user/login.html'), name='login'),

LOGIN_REDIRECT_URL = 'blog-home'

LOGIN_URL = 'login'

add profile image, part 8

signals.py

it creates a profile when a user signs up automatically








